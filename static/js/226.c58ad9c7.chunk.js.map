{"version":3,"file":"static/js/226.c58ad9c7.chunk.js","mappings":"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","sources":["Components/SliderSVG.js"],"sourcesContent":["import * as THREE from 'three';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { useTransition, a } from '@react-spring/three';\nimport flatten from 'lodash-es/flatten';\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader';\nimport '../styles/About.css';\nimport { ShapeGeometry } from 'three';\nimport { extend } from '@react-three/fiber';\nimport { useSpring } from 'react-spring';\n\nconst svgNames = ['city', 'woods', 'beach','morning'];\nconst svgUrls = svgNames.map(name => process.env.PUBLIC_URL + `/images/svg/${name}.svg`);\n\nconst svgDimensions = { \n  city: [5, 5, 5], \n  morning: [2.5, 2.5, 2.5], \n  woods: [1.2, 1.2, 1.2], \n  beach: [4.5, 4.5, 4.5], \n};\n\nextend({ ShapeGeometry });\n\nfunction Shape({ shape, position, color, opacity, index, scale }) {\n  const transformPosition = index === 0 ? [position[0] + 100, position[1] + 100, position[2]] : position;\n  return (\n    <a.mesh position={transformPosition} scale={scale}>\n      <a.meshPhongMaterial attach=\"material\" color={color} opacity={opacity} side={THREE.DoubleSide} depthWrite={false} transparent receiveShadow castShadow />\n      <primitive attach=\"geometry\" object={new ShapeGeometry(shape)} />\n    </a.mesh>\n  );\n}\n\nconst svgCache = {};\n\nconst loadSVG = (svgUrl) => {\n  if (svgCache[svgUrl]) {\n    return Promise.resolve(svgCache[svgUrl]);\n  }\n\n  return new Promise((resolve, reject) => {\n    new SVGLoader().load(\n      svgUrl,\n      data => {\n        if (data && data.paths) {\n          const shapes = flatten(data.paths.map((path, index) =>\n            path.toShapes(true).map(shape => ({ shape, color: path.color, index }))\n          ));\n          svgCache[svgUrl] = shapes;\n          resolve(shapes);\n        } else {\n          reject(new Error('Failed to load SVG: No paths found'));\n        }\n      },\n      undefined,\n      error => {\n        reject(new Error('Failed to load SVG'));\n      }\n    );\n  });\n};\n\nlet lastFrameTime = performance.now();\nfunction Scene() {\n  const [shapes, setShapes] = useState([]);\n  const [currentSVG, setCurrentSVG] = useState(0);\n  const colors = ['#f1cff7', '#96b4df', '#96dfab', '#ffc897'];\n\n  const handleSVGChange = useCallback(async () => {\n    const svgUrl = svgUrls[currentSVG];\n    try {\n      const newShapes = await loadSVG(svgUrl);\n      setShapes(newShapes);\n    } catch (error) {\n      console.error('Error loading SVG:', error);\n    }\n  }, [currentSVG]);\n\n  useEffect(() => {\n    handleSVGChange();\n  }, [currentSVG, handleSVGChange]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCurrentSVG(prev => (prev + 1) % svgUrls.length);\n    }, 7000); // Change toutes les 10 secondes\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  useEffect(() => {\n    function render() {\n      const currentTime = performance.now();\n      if (currentTime - lastFrameTime >= 16) { // 60 FPS\n        // Effectuer le rendu ici\n        lastFrameTime = currentTime;\n      }\n      requestAnimationFrame(render);\n    }\n    render();\n  }, []);\n\n  const { color } = useSpring({ color: colors[currentSVG], config: { duration: 1000 } });\n\n  const transitions = useTransition(shapes, {\n    from: ({ shape }) => ({\n      position: [500, 500, 200],\n      opacity: 0,\n      scale: svgDimensions[svgNames[currentSVG]] || [2, 2, 2]\n    }),\n    enter: ({ shape }) => ({\n      position: [-100, 0, 0],\n      opacity: 1,\n      scale: svgDimensions[svgNames[currentSVG]] || [2, 2, 2]\n    }),\n    leave: ({ shape }) => ({\n      position: [1000, -500, 10],\n      opacity: 0,\n      scale: svgDimensions[svgNames[currentSVG]] || [2, 2, 2]\n    }),\n    keys: item => item.shape.uuid,\n    trail: 5,\n    config: { mass: 10, tension: 400, friction: 50, precision: 0.0001 },\n    lazy: true,\n  });\n\n  return (\n    <>\n      <a.mesh scale={[20000, 20000, 1]} rotation={[0, THREE.MathUtils.degToRad(-20), 0]}>\n        <planeGeometry attach=\"geometry\" args={[1, 1]} />\n        <a.meshPhongMaterial attach=\"material\" color={color} depthTest={false} receiveShadow castShadow/>\n      </a.mesh>\n\n      <group position={[1000, -1000, 0]} rotation={[0, THREE.MathUtils.degToRad(180), 0]}>\n        {transitions((props, item) => (\n          <Shape key={item.shape.uuid} {...item} {...props} />\n        ))}\n      </group>\n    </>\n  );\n}\n\nfunction About() {\n  return (\n    <div className=\"about w-full h-full\">\n      <Canvas\n        camera={{\n          fov: 80,\n          position: [0, 0, 2000],\n          rotation: [0, THREE.MathUtils.degToRad(-20), THREE.MathUtils.degToRad(180)],\n          far: 20000,\n        }}\n        style={{ display:'block', height:'955px', width:'100%', margin:'auto' }}\n      >\n        <ambientLight intensity={1} />\n        <directionalLight\n          intensity={0.8}\n          position={[-500, 500, 500]}\n          shadow-mapSize-width={2048}\n          shadow-mapSize-height={2048}\n          shadow-camera-near={0.5}\n          shadow-camera-far={500}\n          shadow-camera-left={-500}\n          shadow-camera-right={500}\n          shadow-camera-top={500}\n          shadow-camera-bottom={-500}\n          castShadow\n        />\n        <spotLight\n          color={new THREE.Color('white')}\n          intensity={1.5}\n          position={[-100, 500, 500]}\n          angle={0.5}\n          penumbra={0.5}\n          castShadow\n          shadow-mapSize-width={2048}\n          shadow-mapSize-height={2048}\n          shadow-camera-near={0.5}\n          shadow-camera-far={500}\n        />\n        <Scene />\n      </Canvas>\n      <p className=\"header-about\">\n        <span className=\"name text-6xl font-bold text-gray-800\">Damien Cuvillier</span><br/>\n        <span className=\"role text-3xl font-bold text-gray-800 mb-4\">DÃ©veloppeur web</span><br/>\n        <span className=\"description text-xl text-gray-700 mt-4\">Ensemble, rÃ©alisons des projets innovants.<br/> Ã distance ou sur site, je suis prÃªt Ã  relever de nouveaux dÃ©fis.</span>\n      </p>\n    </div>\n  );\n}\nexport default About"],"names":["svgNames","svgUrls","map","name","svgDimensions","city","morning","woods","beach","Shape","_ref","shape","position","color","opacity","index","scale","transformPosition","_jsxs","a","mesh","children","_jsx","meshPhongMaterial","attach","side","THREE","depthWrite","transparent","receiveShadow","castShadow","object","ShapeGeometry","extend","svgCache","lastFrameTime","performance","now","Scene","shapes","setShapes","useState","currentSVG","setCurrentSVG","handleSVGChange","useCallback","async","svgUrl","newShapes","Promise","resolve","reject","SVGLoader","load","data","paths","flatten","path","toShapes","Error","undefined","error","loadSVG","console","useEffect","intervalId","setInterval","prev","length","clearInterval","render","currentTime","requestAnimationFrame","useSpring","config","duration","transitions","useTransition","from","_ref2","enter","_ref3","leave","_ref4","keys","item","uuid","trail","mass","tension","friction","precision","lazy","_Fragment","rotation","degToRad","args","depthTest","props","className","Canvas","camera","fov","far","style","display","height","width","margin","intensity","angle","penumbra"],"sourceRoot":""}