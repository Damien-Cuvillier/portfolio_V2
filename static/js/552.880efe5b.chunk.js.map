{"version":3,"file":"static/js/552.880efe5b.chunk.js","mappings":"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","sources":["Components/SliderSVG.js"],"sourcesContent":["import * as THREE from 'three';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { useTransition, a } from '@react-spring/three';\nimport flatten from 'lodash-es/flatten';\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader';\nimport '../styles/Intro.css';\nimport { ShapeGeometry } from 'three';\nimport { extend } from '@react-three/fiber';\nimport { useSpring } from 'react-spring';\n\nconst svgNames = ['city', 'woods', 'beach','morning'];\nconst svgUrls = svgNames.map(name => process.env.PUBLIC_URL + `/images/svg/${name}.svg`);\n\nconst svgDimensions = {\n  desktop: {\n    city: [5, 5, 5], \n    woods: [1.2, 1.2, 1.2],\n    beach: [4.5, 4.5, 4.5],\n    morning: [2.5, 2.5, 2.5], \n  },\n  tablet: {\n    city: [4, 4, 4],\n    woods: [0.9, 0.9, 0.9],\n    beach: [3.5, 3.5, 3.5],\n    morning: [2.2, 2.2, 2.2],\n  },\n  mobile: {\n    city: [3.2, 3.2, 3.2],\n    woods: [0.8, 0.8, 0.8],\n    beach: [3, 3, 3],\n    morning: [1.8, 1.8, 1.8],\n  }\n};\n\nextend({ ShapeGeometry });\n\nfunction Shape({ shape, position, color, opacity, index, scale }) {\n  const transformPosition = index === 0 ? [position[0] + 100, position[1] + 100, position[2]] : position;\n  return (\n    <a.mesh position={transformPosition} scale={scale}>\n      <a.meshPhongMaterial attach=\"material\" color={color} opacity={opacity} side={THREE.DoubleSide} depthWrite={false} transparent receiveShadow castShadow />\n      <primitive attach=\"geometry\" object={new ShapeGeometry(shape)} />\n    </a.mesh>\n  );\n}\n\nconst svgCache = {};\n\nconst loadSVG = (svgUrl) => {\n  if (svgCache[svgUrl]) {\n    return Promise.resolve(svgCache[svgUrl]);\n  }\n\n  return new Promise((resolve, reject) => {\n    new SVGLoader().load(\n      svgUrl,\n      data => {\n        if (data && data.paths) {\n          const shapes = flatten(data.paths.map((path, index) =>\n            path.toShapes(true).map(shape => ({ shape, color: path.color, index }))\n          ));\n          svgCache[svgUrl] = shapes;\n          resolve(shapes);\n        } else {\n          reject(new Error('Failed to load SVG: No paths found'));\n        }\n      },\n      undefined,\n      error => {\n        reject(new Error('Failed to load SVG'));\n      }\n    );\n  });\n};\n\nlet lastFrameTime = performance.now();\n\nfunction Scene() {\n  const [shapes, setShapes] = useState([]);\n  const [currentSVG, setCurrentSVG] = useState(0);\n  const [screenSize, setScreenSize] = useState('desktop');\n\n  const colors = ['#f1cff7', '#96b4df', '#96dfab', '#ffc897'];\n\n  const handleSVGChange = useCallback(async () => {\n    const svgUrl = svgUrls[currentSVG];\n    try {\n      const newShapes = await loadSVG(svgUrl);\n      setShapes(newShapes);\n    } catch (error) {\n      console.error('Error loading SVG:', error);\n    }\n  }, [currentSVG]);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth <= 480) {\n        setScreenSize('mobile');\n      } else if (window.innerWidth <= 768) {\n        setScreenSize('tablet');\n      } else {\n        setScreenSize('desktop');\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    handleResize(); // Vérification initiale\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  useEffect(() => {\n    handleSVGChange();\n  }, [currentSVG, handleSVGChange]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCurrentSVG(prev => (prev + 1) % svgUrls.length);\n    }, 7000); // Change toutes les 10 secondes\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  useEffect(() => {\n    function render() {\n      const currentTime = performance.now();\n      if (currentTime - lastFrameTime >= 16) { // 60 FPS\n        // Effectuer le rendu ici\n        lastFrameTime = currentTime;\n      }\n      requestAnimationFrame(render);\n    }\n    render();\n  }, []);\n\n  const { color } = useSpring({ color: colors[currentSVG], config: { duration: 1000 } });\n\n  const transitions = useTransition(shapes, {\n    from: ({ shape }) => ({\n      position: [500, 500, 200],\n      opacity: 0,\n      scale: svgDimensions[screenSize][svgNames[currentSVG]] || [2, 2, 2]\n    }),\n    enter: ({ shape }) => {\n      // Ajustement de la position en fonction de la taille d'écran\n      let xPosition = -100; // Position par défaut\n      if (window.innerWidth <= 1440) xPosition = -800;\n      if (window.innerWidth <= 1024) xPosition = -1000;\n      if (window.innerWidth <= 768) xPosition = -900;\n      if (window.innerWidth <= 480) xPosition = -700;\n       // Ajustement spécifique pour 'woods'\n      if (svgNames[currentSVG] === 'woods') {\n      xPosition += 300; // Décalage vers la droite de 200 unités\n      }\n      if (svgNames[currentSVG] === 'morning') {\n        xPosition -= 200; // Décalage vers la droite de 200 unités\n        }\n      // Position verticale\n      let yPosition = 0;\n      if (window.innerWidth <= 1440) yPosition = 600;\n      if (window.innerWidth <= 1024) yPosition = 500;\n      if (window.innerWidth <= 768) yPosition = 900;\n      if (window.innerWidth <= 480) yPosition = 1000;\n    return {\n      position: [xPosition, yPosition, 0],\n      opacity: 1,\n      scale: svgDimensions[screenSize][svgNames[currentSVG]] || [2, 2, 2]\n    };\n  },\n    leave: ({ shape }) => ({\n      position: [1000, -500, 10],\n      opacity: 0,\n      scale: svgDimensions[screenSize][svgNames[currentSVG]] || [2, 2, 2]\n    }),\n    keys: item => item.shape.uuid,\n    trail: 5,\n    config: { mass: 10, tension: 400, friction: 50, precision: 0.0001 },\n    lazy: true,\n  });\n\n  return (\n    <>\n      <a.mesh scale={[20000, 20000, 1]} rotation={[0, THREE.MathUtils.degToRad(-20), 0]}>\n        <planeGeometry attach=\"geometry\" args={[1, 1]} />\n        <a.meshPhongMaterial attach=\"material\" color={color} depthTest={false} receiveShadow castShadow/>\n      </a.mesh>\n\n      <group position={[1000, -1000, 0]} rotation={[0, THREE.MathUtils.degToRad(180), 0]}>\n        {transitions((props, item) => (\n          <Shape key={item.shape.uuid} {...item} {...props} />\n        ))}\n      </group>\n    </>\n  );\n}\n\nfunction About() {\n  return (\n    <div className=\"home w-full h-full\">\n      <Canvas\n        camera={{\n          fov: 80,\n          position: [0, 0, 2000],\n          rotation: [0, THREE.MathUtils.degToRad(-20), THREE.MathUtils.degToRad(180)],\n          far: 20000,\n        }}\n        style={{ \n    display: 'block', \n    height: '955px', \n    width: '100%', \n    margin: 'auto',\n    maxHeight: '100vh' // Ajout pour garantir que le canvas ne dépasse pas la hauteur de la fenêtre\n  }}\n      >\n        <ambientLight intensity={1} />\n        <directionalLight\n          intensity={0.8}\n          position={[-500, 500, 500]}\n          shadow-mapSize-width={2048}\n          shadow-mapSize-height={2048}\n          shadow-camera-near={0.5}\n          shadow-camera-far={500}\n          shadow-camera-left={-500}\n          shadow-camera-right={500}\n          shadow-camera-top={500}\n          shadow-camera-bottom={-500}\n          castShadow\n        />\n        <spotLight\n          color={new THREE.Color('white')}\n          intensity={1.5}\n          position={[-100, 500, 500]}\n          angle={0.5}\n          penumbra={0.5}\n          castShadow\n          shadow-mapSize-width={2048}\n          shadow-mapSize-height={2048}\n          shadow-camera-near={0.5}\n          shadow-camera-far={500}\n        />\n        <Scene />\n      </Canvas>\n      <p className=\"header-home\">\n  <span className=\"name-container\">\n    <span className=\"firstname text-6xl font-bold text-gray-800 pr-4\">Damien</span>\n    <span className=\"lastname text-6xl font-bold text-gray-800\">Cuvillier</span>\n  </span>\n  <br/>\n  <span className=\"role text-3xl font-bold text-gray-800 mb-4\">Développeur web</span>\n  <br/>\n  <span className=\"intro text-xl text-gray-700 mt-4\">\n    Ensemble, réalisons des projets innovants.<br/> \n    À distance ou sur site, je suis prêt à relever de nouveaux défis.\n  </span>\n</p>\n    </div>\n  );\n}\nexport default About"],"names":["svgNames","svgUrls","map","name","svgDimensions","desktop","city","woods","beach","morning","tablet","mobile","Shape","_ref","shape","position","color","opacity","index","scale","transformPosition","_jsxs","a","mesh","children","_jsx","meshPhongMaterial","attach","side","THREE","depthWrite","transparent","receiveShadow","castShadow","object","ShapeGeometry","extend","svgCache","lastFrameTime","performance","now","Scene","shapes","setShapes","useState","currentSVG","setCurrentSVG","screenSize","setScreenSize","handleSVGChange","useCallback","async","svgUrl","newShapes","Promise","resolve","reject","SVGLoader","load","data","paths","flatten","path","toShapes","Error","undefined","error","loadSVG","console","useEffect","handleResize","window","innerWidth","addEventListener","removeEventListener","intervalId","setInterval","prev","length","clearInterval","render","currentTime","requestAnimationFrame","useSpring","config","duration","transitions","useTransition","from","_ref2","enter","_ref3","xPosition","yPosition","leave","_ref4","keys","item","uuid","trail","mass","tension","friction","precision","lazy","_Fragment","rotation","degToRad","args","depthTest","props","className","Canvas","camera","fov","far","style","display","height","width","margin","maxHeight","intensity","angle","penumbra"],"sourceRoot":""}